{:meta/version 1

 ;; Currently, we support either "Markdown" or "Org".
 ;; This can overwrite your global preference so that
 ;; maybe your personal preferred format is Org but you'd
 ;; need to use Markdown for some projects.
 ;; :preferred-format ""

 ;; Preferred workflow style.
 ;; Value is either ":now" for NOW/LATER style,
 ;; or ":todo" for TODO/DOING style.
 :preferred-workflow :now

 ;; The app will ignore those directories or files.
 ;; E.g. "/archived" "/test.md"
 :hidden []

 ;; When creating the new journal page, the app will use your template if there is one.
 ;; You only need to input your template name here.
 :default-templates
 {:journals "Daily Notes"}

 ;; Whether to enable hover on tooltip preview feature
 ;; Default is true, you can also toggle this via setting page
 :ui/enable-tooltip? false

 :feature/enable-block-timestamps? true
 :feature/disable-scheduled-and-deadline-query? true

 ;; Specify a custom CSS import
 ;; This option take precedence over your local `logseq/custom.css` file
 ;; You may find a list of awesome logseq themes here:
 ;; https://github.com/logseq/awesome-logseq#css-themes
 ;; Example:
 ;; :custom-css-url "@import url('https://cdn.jsdelivr.net/gh/dracula/logseq@master/custom.css');"

 ;; When :all-pages-public? true, export repo would export all pages within that repo.
 ;; Regardless of whether you've set any page to public or not.
 ;; Example:
 ;; :publishing/all-pages-public? true

 ;; Specify default home page and sidebar status for Logseq
 ;; If not specified, Logseq default opens journals page on startup
 ;; value for `:page` is name of page
 ;; Possible options for `:sidebar` are
 ;; 1. `"Contents"` to open up `Contents` in sidebar by default
 ;; 2. `page name` to open up some page in sidebar
 ;; 3. Or multiple pages in an array ["Contents" "Page A" "Page B"]
 ;; If `:sidebar` is not set, sidebar will be hidden
 ;; Example:
 ;; 1. Setup page "Changelog" as home page and "Contents" in sidebar
 ;; :default-home {:page "Changelog", :sidebar "Contents"}
 ;; 2. Setup page "Jun 3rd, 2021" as home page without sidebar
 ;; :default-home {:page "Jun 3rd, 2021"}
 ;; 3. Setup page "home" as home page with multiple pages in sidebar
 ;; :default-home {:page "home" :sidebar ["page a" "page b"]}

 ;; Tell logseq to use a specific folder in the repo as a default location for notes
 ;; if not specified, notes are stored in `pages` directory
 ;; :pages-directory "your-directory"

 ;; Tell logseq to use a specific folder in the repo as a default location for journals
 ;; if not specified, journals are stored in `journals` directory
 ;; :journals-directory "your-directory"

 ;; Set this to true will convert
 ;; `[[Grant Ideas]]` to `[[file:./grant_ideas.org][Grant Ideas]]` for org-mode
 ;; For more, see https://github.com/logseq/logseq/issues/672
 ;; :org-mode/insert-file-link? true

 ;; If you prefer to use the file name as the page title
 ;; instead of the first heading's title
 ;; the only option for now is `file`
 ;; :page-name-order "file"

 ;; Setup custom shortcuts under `:shortcuts` key
 ;; Syntax:
 ;; 1. `+` means keys pressing simultaneously. eg: `ctrl+shift+a`
 ;; 2. ` ` empty space between keys represents key chords. eg: `t s` means press `s` follow by `t`
 ;; 3. `mod` means `Ctrl` for Windows/Linux  and `Command` for Mac
 ;; 4. use `false` to disable particular shortcut
 ;; 4. you can define multiple bindings for one action, eg `["ctrl+j" "down"]`
 ;; full list of configurable shortcuts are available below:
 ;; https://github.com/logseq/logseq/blob/master/src/main/frontend/modules/shortcut/config.cljs
 ;; Example:
 ;; :shortcuts
 ;; {:editor/new-block       "enter"
 ;;  :editor/new-line        "shift+enter"
 ;;  :editor/insert-link     "mod+shift+k"
 ;;  :editor/hightlight       false
 ;;  :ui/toggle-settings     "t s"
 ;;  :editor/up              ["ctrl+k" "up"]
 ;;  :editor/down            ["ctrl+j" "down"]
 ;;  :editor/left            ["ctrl+h" "left"]
 ;;  :editor/right           ["ctrl+l" "right"]}
 :shortcuts {}

 ;; By default, pressing `Enter` in the document mode will create a new line.
 ;; Set this to `true` so that it's the same behaviour as the usual outliner mode.
 :shortcut/doc-mode-enter-for-new-block? false

 ;; Whether to show command doc on hover
 :ui/show-command-doc? true

 ;; Whether to show empty bullets for non-document mode (the default mode)
 :ui/show-empty-bullets? true

 ;; The app will show those queries in today's journal page,
 ;; the "NOW" query asks the tasks which need to be finished "now",
 ;; the "NEXT" query asks the future tasks.
 :default-queries
 {:journals
 
  [
   

 {:title [:h4 "⌛ WAITING"]
    :query [:find (pull ?h [*])
            :where
              [?h :block/marker ?marker] 
              [(contains? #{"WAITING"} ?marker)]]
    :collapsed? false},       
   
 {:title [:h3 "🔥 Overdue"]
      :query [:find (pull ?block [*])
              :in $ ?start ?next
              :where
                (or-join [?block, ?d]
                  [?block :block/scheduled ?d]
                  [?block :block/deadline ?d]
                  (and
                     [?block :block/ref-pages ?rp]
                     [?rp :block/journal-day ?d] 
                   )
                )
				(or-join [?block]
                   (and
                     [?block :block/marker ?marker]
                     [(contains? #{"NOW" "TODO" "LATER" "DOING"} ?marker)]
                   )
                   (and 
                   		(not [?block :block/marker _])
                    	(or
                           [?block :block/scheduled ?d]
                           [?block :block/deadline ?d]
                         )
                    )
                )

              [(> ?d ?start)]
              [(< ?d ?next)]]
              :result-transform (fn [result]
                        (sort-by (fn [h]
                                   (or (get h :block/scheduled) (get h :block/deadline))) result))
      :inputs [:90d-before :0d-before]
      :collapsed? false},
   

 {:title "⏰ NOW"
    :query [:find (pull ?b [*])
             :in $ ?today
	:where
                       [?b :block/marker ?marker]
            [(contains? #{"NOW" "TODO" "DOING"} ?marker)]]
      :result-transform
        (fn [result]
          (sort-by (fn [h] [(get h :block/priority "Z") (get h :block/created-at)]) result))
      :inputs [:today]
      :collapsed? false},   
   
   
{:title [:h4 "⏰ Today"]
      :query [:find (pull ?block [*])
              :in $ ?day
              :where
              [?block :block/marker ?marker]
              (or
                [?block :block/scheduled ?d]
                [?block :block/deadline ?d])
              [(contains? #{"LATER" "WAITING"} ?marker)]
              [(= ?d ?day)]]
      :result-transform
        (fn [result]
          (sort-by (fn [h] [(get h :block/priority "Z") (get h :block/created-at)]) result))
      :inputs [:today]
      :collapsed? false},   

   
    {:title [:h4 "☀️ Tomorrow"]
      :query [:find (pull ?block [*])
              :in $ ?day
              :where
              [?block :block/marker ?marker]
              (or
                [?block :block/scheduled ?d]
                [?block :block/deadline ?d])
              [(contains? #{"LATER"} ?marker)]
              [(= ?d ?day)]]
      :result-transform
        (fn [result]
          (sort-by (fn [h] [(get h :block/priority "Z") (get h :block/created-at)]) result))
      :inputs [:1d-after]
      :collapsed? false},
   
   
    {:title [:h4 "📆 Sooner"]
      :query [:find (pull ?block [*])
              :in $ ?start ?next
              :where
              [?block :block/marker ?marker]
              (or
                [?block :block/scheduled ?d]
                [?block :block/deadline ?d])
              [(contains? #{"NOW" "TODO" "LATER" "DOING"} ?marker)]
              [(> ?d ?start)]
              [(< ?d ?next)]]
      :result-transform (fn [result]
                (sort-by (fn [h]
                            (or (get h :block/scheduled) (get h :block/deadline))) result))
      :inputs [:1d-after :7d-after]
      :collapsed? true},
  
  
    {:title [:h4 "📅 Later"]
      :query [:find (pull ?block [*])
              :in $ ?start ?next
              :where
              [?block :block/marker ?marker]
              (or
                [?block :block/scheduled ?d]
                [?block :block/deadline ?d])
              [(contains? #{"NOW" "TODO" "LATER" "DOING" "WAITING"} ?marker)]
              [(> ?d ?start)]
              [(< ?d ?next)]]
      :result-transform (fn [result]
                (sort-by (fn [h]
                            (or (get h :block/scheduled) (get h :block/deadline))) result))
      :inputs [:6d-after :90d-after]
      :collapsed? true},
   
    {:title [:h4 "📝 Draft"]
      :query [:find (pull ?b [*])
            :where
            (or [?b :block/priority "A"] [?b :block/priority "B"] [?b :block/priority "C"])
            [?b :block/marker ?marker]
            [?b :block/ref-pages ?p]
            [?p :block/name "life/notes/drafts 📝"]
            (not [?b :block/scheduled ?d])
            (not [?b :block/deadline ?d])
            [(contains? #{"NOW" "TODO" "LATER" "DOING" "WAITING"} ?marker)]]
    :result-transform
        (fn [result]
          (sort-by (fn [h] [(get h :block/priority "Z") (get h :block/created-at)]) result))
    :breadcrumb-show? false,
     :collapsed? true},
   
    {:title [:h4 "🍿 Watch"]
      :query [:find (pull ?b [*])
            :where
            (or [?b :block/priority "A"] [?b :block/priority "B"] [?b :block/priority "C"])
            [?b :block/marker ?marker]
            [?b :block/ref-pages ?p]
            (or [?p :block/name "movie"] [?p :block/name "video"] [?p :block/name "watch"])
            (not [?b :block/scheduled ?d])
            (not [?b :block/deadline ?d])
            [(contains? #{"NOW" "TODO" "LATER" "DOING" "WAITING"} ?marker)]]
    :result-transform
        (fn [result]
          (sort-by (fn [h] [(get h :block/priority "Z") (get h :block/created-at)]) result))
    :breadcrumb-show? false,

     :collapsed? true},
 {:title [:h4 "📖 Read"]
      :query [:find (pull ?b [*])
            :where
            (or [?b :block/priority "A"] [?b :block/priority "B"] [?b :block/priority "C"])
            [?b :block/marker ?marker]
            [?b :block/ref-pages ?p]
            (or [?p :block/name "text"] [?p :block/name "book"] [?p :block/name "read"])
            (not [?b :block/scheduled ?d])
            (not [?b :block/deadline ?d])
            [(contains? #{"NOW" "TODO" "LATER" "DOING" "WAITING"} ?marker)]]
    :result-transform
        (fn [result]
          (sort-by (fn [h] [(get h :block/priority "Z") (get h :block/created-at)]) result))
    :breadcrumb-show? false,  
  :collapsed? true},
   
           
    ]}


 ;; Add your own commands to speedup.
 ;; E.g. [["js" "Javascript"]]
 :commands
 [
 	["idea" "#[[life/business/ideas 💡]]"], 
    ["question" "#[[life/notes/question]]"],
 	["emotions" "#[[life/notes/emotions]]"], 	
 	["intriguing" "#[[life/notes/intriguing]]"],
 	["gratitude" "#[[life/notes/gratitude]]"],
    ["challenge", "#[[life/health/mental/challenge]]"],
	["reflection" "#[[life/notes/reflection]]"]  
  ]

 ;; By default, a block can only be collapsed if it has some children.
 ;; `:outliner/block-title-collapse-enabled? true` enables a block with a title
 ;; (multiple lines) can be collapsed too. For example:
 ;; - block title
 ;;   block content
 :outliner/block-title-collapse-enabled? true

 ;; Macros replace texts and will make you more productive.
 ;; For example:
 ;; Add this to the macros below:
 ;; {"poem" "Rose is $1, violet's $2. Life's ordered: Org assists you."}
 ;; input "{{{poem red,blue}}}"
 ;; becomes
 ;; Rose is red, violet's blue. Life's ordered: Org assists you.
 :macros {}

 ;; The default level to be opened for the linked references.
 ;; For example, if we have some example blocks like this:
 ;; - a [[page]] (level 1)
 ;;   - b        (level 2)
 ;;     - c      (level 3)
 ;;       - d    (level 4)
 ;;
 ;; With the default value of level 2, `b` will be collapsed.
 ;; If we set the level's value to 3, `b` will be opened and `c` will be collapsed.
 :ref/default-open-blocks-level 2

 :ref/linked-references-collapsed-threshold 10
 :favorites []
 :ui/show-brackets? false

 ;; any number between 0 and 1 (the greater it is the faster the changes of the next-interval of card reviews) (default 0.5)
 ;; :srs/learning-fraction 0.5

 ;; the initial interval after the first successful review of a card (default 4)
 ;; :srs/initial-interval 4

 ;; hide specific properties for blocks
 ;; E.g. #{:created-at :updated-at}
 ;; :block-hidden-properties #{}

 ;; logbook setup
 ;; :logbook/settings
 ;; {:with-second-support? false ;limit logbook to minutes, seconds will be eliminated
 ;;  :enabled-in-all-blocks true ;display logbook in all blocks after timetracking
 ;;  :enabled-in-timestamped-blocks false ;don't display logbook at all
 ;; }

 ;; Mobile photo uploading setup
 ;; :mobile/photo
 ;; {:allow-editing? true}

 ;; Extra CodeMirror options
 ;; :editor/extra-codemirror-options {:keyMap "emacs" :lineWrapping true}

 ;; ignore #+keyword: for parsing page references in orgmode
 ;; :ignored-page-references-keywords #{"author" "startup"}
 
 ;; Quick capture templates on mobile for recieving contents from other apps.
 ;; Each template contains three elements {time}, {text} and {url}, which can be auto-expanded
 ;; by received contents from other apps. Note: the {} cannot be omitted.
 ;; - {time}: capture time
 ;; - {text}: text that users selected before sharing.
 ;; - {url}: url or assets path for media files stored in Logseq.
 ;; You can also reorder them, or even only use one or two of them in the template.
 ;; You can also insert or format any text in the template as shown in the following examples.
 ;; :quick-capture-templates
 ;; {:text "[[quick capture]] **{time}**: \n - {text} from {url}"
 ;;  :media "[[quick capture]] **{time}**: \n - {url}"}
 }
